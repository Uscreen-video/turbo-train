import{connectStreamSource as e,disconnectStreamSource as t}from"@hotwired/turbo";import*as s from"@hotwired/turbo";export{s as Turbo};let n;async function getConsumer(){return n||setConsumer(createConsumer().then(setConsumer))}function setConsumer(e){return n=e}async function createConsumer(){const{createConsumer:e}=await import("@rails/actioncable/src");return e()}async function subscribeTo(e,t){const{subscriptions:s}=await getConsumer();return s.create(e,t)}var r=Object.freeze(Object.defineProperty({__proto__:null,getConsumer:getConsumer,setConsumer:setConsumer,createConsumer:createConsumer,subscribeTo:subscribeTo},Symbol.toStringTag,{value:"Module"}));function walk(e){return e&&"object"===typeof e?e instanceof Date||e instanceof RegExp?e:Array.isArray(e)?e.map(walk):Object.keys(e).reduce((function(t,s){var n=s[0].toLowerCase()+s.slice(1).replace(/([A-Z]+)/g,(function(e,t){return"_"+t.toLowerCase()}));t[n]=walk(e[s]);return t}),{}):e}class TurboCableStreamSourceElement extends HTMLElement{async connectedCallback(){e(this);this.subscription=await subscribeTo(this.channel,{received:this.dispatchMessageEvent.bind(this)})}disconnectedCallback(){t(this);this.subscription&&this.subscription.unsubscribe()}dispatchMessageEvent(e){const t=new MessageEvent("message",{data:e});return this.dispatchEvent(t)}get channel(){const e=this.getAttribute("channel");const t=this.getAttribute("signed-stream-name");return{channel:e,signed_stream_name:t,...walk({...this.dataset})}}}customElements.define("turbo-cable-stream-source",TurboCableStreamSourceElement);function encodeMethodIntoRequestBody(e){if(e.target instanceof HTMLFormElement){const{target:t,detail:{fetchOptions:s}}=e;t.addEventListener("turbo:submit-start",(({detail:{formSubmission:{submitter:e}}})=>{const n=e&&e.formMethod||s.body&&s.body.get("_method")||t.getAttribute("method");if(!/get/i.test(n)){/post/i.test(n)?s.body.delete("_method"):s.body.set("_method",n);s.method="post"}}),{once:true})}}addEventListener("turbo:before-fetch-request",encodeMethodIntoRequestBody);export{r as cable};

//# sourceMappingURL=index.js.map